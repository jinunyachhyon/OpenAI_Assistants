# Simulated message object for demonstration purposes
class Annotation:
    def __init__(self, text, file_citation=None, file_path=None):
        self.text = text
        self.file_citation = file_citation
        self.file_path = file_path

class FileCitation:
    """
    File citations are created by the file_search tool
    and define references to a specific file that was 
    uploaded and used by the Assistant to generate the response.
    """
    def __init__(self, file_id, quote):
        self.file_id = file_id
        self.quote = quote

class FilePath:
    """
    File path annotations are created by the code_interpreter tool 
    and contain references to the files generated by the tool.
    """
    def __init__(self, file_id):
        self.file_id = file_id

class File:
    def __init__(self, file_id, filename):
        self.file_id = file_id
        self.filename = filename


# Mocking the client API for retrieving files
class MockClient:
    def __init__(self, files):
        self.files = {file.file_id: file for file in files}

    def files(self):
        return self

    def retrieve(self, file_id):
        return self.files.get(file_id)


# Sample data
mock_files = [
    File(file_id="file123", filename="data.csv"),
    File(file_id="file456", filename="report.pdf"),
]

client = MockClient(mock_files)

message = {
    "content": {
        "value": "The results are evident in the data file and the referenced report.",
        "annotations": [
            Annotation("data file", file_citation=FileCitation(file_id="file123", quote="Data trends from Q1")),
            Annotation("referenced report", file_path=FilePath(file_id="file456")),
        ],
    }
}


# Extract message content and annotations
message_content = message["content"]
annotations = message_content["annotations"]
citations = []


# Iterate over the annotations and add footnotes
for index, annotation in enumerate(annotations):
    # Replace the text with a footnote (Example: replacement removes the original text (data file) and substitutes it with a marker ([1]))
    message_content["value"] = message_content["value"].replace(annotation.text, f' [{index}]')
    print("Message content after replacing text with a footnote:\n", message_content["value"])

    # Gather citations based on annotation attributes
    if annotation.file_citation:
        cited_file = client.retrieve(annotation.file_citation.file_id)
        citations.append(f'[{index}] {annotation.file_citation.quote} from {cited_file.filename}')
    elif annotation.file_path:
        cited_file = client.retrieve(annotation.file_path.file_id)
        citations.append(f'[{index}] Click <here> to download {cited_file.filename}')

# Add footnotes to the end of the message before displaying to user
message_content["value"] += '\n' + '\n'.join(citations)

# Final Output
print("\nUpdated Message Content:")
print(message_content["value"])
